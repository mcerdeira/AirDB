//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TestingWebApp.AirDBService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AirDBService.IAirDBSvc")]
    public interface IAirDBSvc {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirDBSvc/Create", ReplyAction="http://tempuri.org/IAirDBSvc/CreateResponse")]
        string Create(string tablename, string[] columns, int timetolive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirDBSvc/Create", ReplyAction="http://tempuri.org/IAirDBSvc/CreateResponse")]
        System.Threading.Tasks.Task<string> CreateAsync(string tablename, string[] columns, int timetolive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirDBSvc/InsertRow", ReplyAction="http://tempuri.org/IAirDBSvc/InsertRowResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        bool InsertRow(string tablename, object[] row);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirDBSvc/InsertRow", ReplyAction="http://tempuri.org/IAirDBSvc/InsertRowResponse")]
        System.Threading.Tasks.Task<bool> InsertRowAsync(string tablename, object[] row);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirDBSvc/Delete", ReplyAction="http://tempuri.org/IAirDBSvc/DeleteResponse")]
        bool Delete(string tablename, string where);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirDBSvc/Delete", ReplyAction="http://tempuri.org/IAirDBSvc/DeleteResponse")]
        System.Threading.Tasks.Task<bool> DeleteAsync(string tablename, string where);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirDBSvc/Drop", ReplyAction="http://tempuri.org/IAirDBSvc/DropResponse")]
        string Drop(string tablename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirDBSvc/Drop", ReplyAction="http://tempuri.org/IAirDBSvc/DropResponse")]
        System.Threading.Tasks.Task<string> DropAsync(string tablename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirDBSvc/Query", ReplyAction="http://tempuri.org/IAirDBSvc/QueryResponse")]
        System.Data.DataTable Query([System.ServiceModel.MessageParameterAttribute(Name="query")] string query1, string tablename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirDBSvc/Query", ReplyAction="http://tempuri.org/IAirDBSvc/QueryResponse")]
        System.Threading.Tasks.Task<System.Data.DataTable> QueryAsync(string query, string tablename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirDBSvc/TableNames", ReplyAction="http://tempuri.org/IAirDBSvc/TableNamesResponse")]
        string[] TableNames();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirDBSvc/TableNames", ReplyAction="http://tempuri.org/IAirDBSvc/TableNamesResponse")]
        System.Threading.Tasks.Task<string[]> TableNamesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirDBSvc/TableExists", ReplyAction="http://tempuri.org/IAirDBSvc/TableExistsResponse")]
        bool TableExists(string tablename);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IAirDBSvc/TableExists", ReplyAction="http://tempuri.org/IAirDBSvc/TableExistsResponse")]
        System.Threading.Tasks.Task<bool> TableExistsAsync(string tablename);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IAirDBSvcChannel : TestingWebApp.AirDBService.IAirDBSvc, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AirDBSvcClient : System.ServiceModel.ClientBase<TestingWebApp.AirDBService.IAirDBSvc>, TestingWebApp.AirDBService.IAirDBSvc {
        
        public AirDBSvcClient() {
        }
        
        public AirDBSvcClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public AirDBSvcClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AirDBSvcClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public AirDBSvcClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string Create(string tablename, string[] columns, int timetolive) {
            return base.Channel.Create(tablename, columns, timetolive);
        }
        
        public System.Threading.Tasks.Task<string> CreateAsync(string tablename, string[] columns, int timetolive) {
            return base.Channel.CreateAsync(tablename, columns, timetolive);
        }
        
        public bool InsertRow(string tablename, object[] row) {
            return base.Channel.InsertRow(tablename, row);
        }
        
        public System.Threading.Tasks.Task<bool> InsertRowAsync(string tablename, object[] row) {
            return base.Channel.InsertRowAsync(tablename, row);
        }
        
        public bool Delete(string tablename, string where) {
            return base.Channel.Delete(tablename, where);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteAsync(string tablename, string where) {
            return base.Channel.DeleteAsync(tablename, where);
        }
        
        public string Drop(string tablename) {
            return base.Channel.Drop(tablename);
        }
        
        public System.Threading.Tasks.Task<string> DropAsync(string tablename) {
            return base.Channel.DropAsync(tablename);
        }
        
        public System.Data.DataTable Query(string query1, string tablename) {
            return base.Channel.Query(query1, tablename);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> QueryAsync(string query, string tablename) {
            return base.Channel.QueryAsync(query, tablename);
        }
        
        public string[] TableNames() {
            return base.Channel.TableNames();
        }
        
        public System.Threading.Tasks.Task<string[]> TableNamesAsync() {
            return base.Channel.TableNamesAsync();
        }
        
        public bool TableExists(string tablename) {
            return base.Channel.TableExists(tablename);
        }
        
        public System.Threading.Tasks.Task<bool> TableExistsAsync(string tablename) {
            return base.Channel.TableExistsAsync(tablename);
        }
    }
}
